name: GitHub Clean Tags & Releases
description: Clean up GitHub Tags & Releases based on the current build's semantic version.
inputs:
  keep:
    description: "The number of releases to keep that are lower than or equal to the current semantic version"
    required: false
    default: "10"
  semantic-version:
    description: "The current semantic version (e.g., 2.1.5) of the master build"
    required: true
  token:
    description: "The GitHub personal access token"
    required: true
runs:
  using: "composite"
  steps:
    - name: Get Releases (with pre-release info)
      id: get_releases
      run: |
        # Fetch all releases with their tag_name, prerelease status, and ID
        curl -s -H "Authorization: token ${{ inputs.token}}" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          | jq -r '.[] | "\(.tag_name),\(.prerelease),\(.id)"' > releases.csv
      shell: bash

    - name: Debug release versions
      id: debug_versions
      run: |
        echo "Fetched releases:"
        cat releases.csv
      shell: bash

    - name: Parse Semantic Version and Remove Pre-Releases
      id: remove_prereleases
      shell: bash
      run: |
        SEMVER="${{ inputs.semantic-version }}"
        
        echo "Current version: $SEMVER"

        # Convert semantic version to individual components
        MAJOR=$(echo $SEMVER | cut -d'.' -f1)
        MINOR=$(echo $SEMVER | cut -d'.' -f2)
        PATCH=$(echo $SEMVER | cut -d'.' -f3)

        echo "Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"

        # Iterate over releases and delete pre-releases that are older than the provided version
        while IFS=',' read -r TAG PRERELEASE RELEASE_ID; do
          # Extract the version components from the tag
          TAG_MAJOR=$(echo $TAG | cut -d'.' -f1)
          TAG_MINOR=$(echo $TAG | cut -d'.' -f2)
          TAG_PATCH=$(echo $TAG | cut -d'.' -f3 | cut -d'-' -f1)

          echo "Checking release: $TAG (prerelease: $PRERELEASE)"

          # If it's a pre-release AND the version is less than or equal to the current
          if [ "$PRERELEASE" == "true" ]; then
            if [[ "$TAG_MAJOR" -lt "$MAJOR" || ( "$TAG_MAJOR" -eq "$MAJOR" && "$TAG_MINOR" -lt "$MINOR" ) || \
                  ( "$TAG_MAJOR" -eq "$MAJOR" && "$TAG_MINOR" -eq "$MINOR" && "$TAG_PATCH" -le "$PATCH" ) ]]; then
              echo "Deleting pre-release $TAG (ID: $RELEASE_ID)"
              curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
                https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
              curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
                https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG
            fi
          fi
        done < releases.csv

    - name: Keep X Latest Non-Pre-Releases Lower Than or Equal to Current Version
      id: clean_up_releases
      shell: bash
      run: |
        SEMVER="${{ inputs.semantic-version }}"
        KEEP=${{ inputs.keep }}

        # Initialize arrays to store non-prerelease versions
        NON_PRERELEASE_TAGS=()
        NON_PRERELEASE_IDS=()

        echo "Processing non-prerelease versions lower than or equal to $SEMVER"

        while IFS=',' read -r TAG PRERELEASE RELEASE_ID; do
          # Extract the version components from the tag
          TAG_MAJOR=$(echo $TAG | cut -d'.' -f1)
          TAG_MINOR=$(echo $TAG | cut -d'.' -f2)
          TAG_PATCH=$(echo $TAG | cut -d'.' -f3 | cut -d'-' -f1)

          echo "Checking release: $TAG (prerelease: $PRERELEASE)"

          # Add non-prereleases that are lower or equal to the current version
          if [ "$PRERELEASE" == "false" ]; then
            if [[ "$TAG_MAJOR" -lt "$MAJOR" || ( "$TAG_MAJOR" -eq "$MAJOR" && "$TAG_MINOR" -lt "$MINOR" ) || \
                  ( "$TAG_MAJOR" -eq "$MAJOR" && "$TAG_MINOR" -eq "$MINOR" && "$TAG_PATCH" -le "$PATCH" ) ]]; then
              NON_PRERELEASE_TAGS+=($TAG)
              NON_PRERELEASE_IDS+=($RELEASE_ID)
            fi
          fi
        done < releases.csv

        echo "Found ${#NON_PRERELEASE_TAGS[@]} non-prerelease versions lower than or equal to $SEMVER"

        # If we have more than the keep limit, delete the extra older versions
        if [ "${#NON_PRERELEASE_TAGS[@]}" -gt "$KEEP" ]; then
          DELETE_COUNT=$((${#NON_PRERELEASE_TAGS[@]} - $KEEP))

          echo "Deleting $DELETE_COUNT non-prerelease versions older than $SEMVER"
          for (( i=0; i<DELETE_COUNT; i++ )); do
            TAG=${NON_PRERELEASE_TAGS[$i]}
            RELEASE_ID=${NON_PRERELEASE_IDS[$i]}
            echo "Deleting non-prerelease version: $TAG (ID: $RELEASE_ID)"
            curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
              https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG
          done
        fi

name: GitHub Clean Tags & Releases
description: Clean up GitHub Tags & Releases based on the current build's semantic version.
inputs:
  keep:
    description: "The number of releases to keep that are lower than or equal to the current semantic version"
    required: false
    default: "10"
  semantic-version:
    description: "The current semantic version (e.g., 2.1.5) of the master build"
    required: true
  token:
    description: "The GitHub personal access token"
    required: true
runs:
  using: "composite"
  steps:
    - name: Fetch All Releases (with pagination)
      id: get_releases
      run: |
        PAGE=1
        while [ $(curl -s -H "Authorization: token ${{ inputs.token}}" \
          -I https://api.github.com/repos/${{ github.repository }}/releases?per_page=100&page=$PAGE \
          | grep "Link:") ]; do
          curl -s -H "Authorization: token ${{ inputs.token}}" \
            https://api.github.com/repos/${{ github.repository }}/releases?per_page=100&page=$PAGE \
            | jq -r '.[] | "\(.tag_name),\(.id)"' >> releases.csv
          PAGE=$((PAGE + 1))
        done
      shell: bash

    - name: Debug release versions
      id: debug_versions
      run: |
        echo "Fetched releases:"
        cat releases.csv
      shell: bash

    - name: Parse Semantic Version and Remove Pre-Releases
      id: remove_prereleases
      shell: bash
      run: |
        SEMVER="${{ inputs.semantic-version }}"
        
        echo "Current version: $SEMVER"

        # Iterate over releases and manually detect prereleases by checking for a hyphen
        while IFS=',' read -r TAG RELEASE_ID; do
          echo "Checking release: $TAG"
          
          # Check if the tag contains a hyphen, indicating it's a prerelease
          if [[ $TAG == *"-"* ]]; then
            echo "$TAG is a prerelease"
            
            # Use version comparison logic to check if the prerelease is older or equal to the current version
            if [[ $(echo -e "$TAG\n$SEMVER" | sort -V | head -n1) == "$TAG" ]]; then
              echo "Deleting prerelease $TAG (ID: $RELEASE_ID)"
              curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
                https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
              curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
                https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG
            fi
          fi
        done < releases.csv

    - name: Keep X Latest Non-Pre-Releases Lower Than or Equal to Current Version
      id: clean_up_releases
      shell: bash
      run: |
        SEMVER="${{ inputs.semantic-version }}"
        KEEP=${{ inputs.keep }}

        # Initialize arrays to store non-prerelease versions
        NON_PRERELEASE_TAGS=()
        NON_PRERELEASE_IDS=()

        echo "Processing non-prerelease versions lower than or equal to $SEMVER"

        while IFS=',' read -r TAG RELEASE_ID; do
          echo "Checking release: $TAG"

          # Check if the tag does not contain a hyphen, indicating it is not a prerelease
          if [[ $TAG != *"-"* ]]; then
            # Compare versions
            if [[ $(echo -e "$TAG\n$SEMVER" | sort -V | head -n1) == "$TAG" ]]; then
              NON_PRERELEASE_TAGS+=($TAG)
              NON_PRERELEASE_IDS+=($RELEASE_ID)
            fi
          fi
        done < releases.csv

        echo "Found ${#NON_PRERELEASE_TAGS[@]} non-prerelease versions lower than or equal to $SEMVER"

        # Sort the tags in ascending order (oldest first)
        NON_PRERELEASE_TAGS_SORTED=($(echo "${NON_PRERELEASE_TAGS[@]}" | tr ' ' '\n' | sort -V))
        NON_PRERELEASE_IDS_SORTED=($(echo "${NON_PRERELEASE_IDS[@]}" | tr ' ' '\n' | sort -V))

        # If we have more than the keep limit, delete the extra older versions
        if [ "${#NON_PRERELEASE_TAGS_SORTED[@]}" -gt "$KEEP" ]; then
          DELETE_COUNT=$((${#NON_PRERELEASE_TAGS_SORTED[@]} - $KEEP))

          echo "Deleting $DELETE_COUNT non-prerelease versions older than $SEMVER"
          for (( i=0; i<DELETE_COUNT; i++ )); do
            TAG=${NON_PRERELEASE_TAGS_SORTED[$i]}
            RELEASE_ID=${NON_PRERELEASE_IDS_SORTED[$i]}
            echo "Deleting non-prerelease version: $TAG (ID: $RELEASE_ID)"
            curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            curl -s -X DELETE -H "Authorization: token ${{ inputs.token}}" \
              https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG
          done
        fi
